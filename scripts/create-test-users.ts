#!/usr/bin/env ts-node

import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

const testUsers = [
  { login: 'admin1', email: 'admin1@test.com', name: '–ê–¥–º–∏–Ω 1', role: 'OWNER' },
  { login: 'partner1', email: 'partner1@test.com', name: '–ü–∞—Ä—Ç–Ω—ë—Ä 1', role: 'PARTNER' },
  { login: 'partner2', email: 'partner2@test.com', name: '–ü–∞—Ä—Ç–Ω—ë—Ä 2', role: 'PARTNER' },
  { login: 'point1', email: 'point1@test.com', name: '–¢–æ—á–∫–∞ 1', role: 'POINT' },
  { login: 'point2', email: 'point2@test.com', name: '–¢–æ—á–∫–∞ 2', role: 'POINT' },
  { login: 'employee1', email: 'employee1@test.com', name: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ 1', role: 'EMPLOYEE' },
  { login: 'employee2', email: 'employee2@test.com', name: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ 2', role: 'EMPLOYEE' },
  { login: 'user1', email: 'user1@test.com', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1', role: 'USER' },
  { login: 'user2', email: 'user2@test.com', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2', role: 'USER' },
  { login: 'user3', email: 'user3@test.com', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3', role: 'USER' },
];

async function createTestUsers() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  const passwordHash = await bcrypt.hash('test123', 10);
  
  for (const userData of testUsers) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await prisma.user.findUnique({
        where: { login: userData.login }
      });
      
      if (existingUser) {
        console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.login} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.create({
        data: {
          login: userData.login,
          email: userData.email,
          name: userData.name,
          passwordHash,
          role: userData.role as any,
        },
        select: {
          id: true,
          login: true,
          name: true,
          role: true,
        }
      });
      
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.login} (${user.name}) - ${user.role}`);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–∞—Ä—Ç–Ω—ë—Ä, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å Partner
      if (userData.role === 'PARTNER') {
        await prisma.partner.create({
          data: {
            name: `${userData.name} - –ö–æ–º–ø–∞–Ω–∏—è`,
            ownerUserId: user.id,
          }
        });
        console.log(`  üìä –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ ${user.login}`);
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userData.login}:`, error);
    }
  }
  
  console.log('üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

async function main() {
  try {
    await createTestUsers();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main();


