#!/usr/bin/env ts-node

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const roles = ['OWNER', 'PARTNER', 'POINT', 'EMPLOYEE', 'USER'];

const pages = [
  { name: '–ê–¥–º–∏–Ω–∫–∞', path: '/admin' },
  { name: '–ü—Ä–æ—Ñ–∏–ª—å', path: '/profile' },
  { name: '–ü–æ–¥–ø–∏—Å–∫–∏', path: '/pricing' },
  { name: '–î–∞—à–±–æ—Ä–¥', path: '/dashboard' },
  { name: '–í–ª–∞–¥–µ–ª–µ—Ü', path: '/owner' },
  { name: '–ü–∞—Ä—Ç–Ω–µ—Ä', path: '/partner' },
  { name: '–¢–æ—á–∫–∞', path: '/point' },
  { name: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫', path: '/employee' },
  { name: '–ó–¥–æ—Ä–æ–≤—å–µ', path: '/health' },
  { name: '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞', path: '/blocked' },
];

async function initRBAC() {
  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π...');
    for (const roleName of roles) {
      await prisma.accessRole.upsert({
        where: { name: roleName },
        update: {},
        create: { name: roleName },
      });
      console.log(`‚úÖ –†–æ–ª—å ${roleName} —Å–æ–∑–¥–∞–Ω–∞`);
    }

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü...');
    for (const page of pages) {
      await prisma.accessPage.upsert({
        where: { path: page.path },
        update: {},
        create: { name: page.name, path: page.path },
      });
      console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page.name} (${page.path}) —Å–æ–∑–¥–∞–Ω–∞`);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const createdRoles = await prisma.accessRole.findMany();
    const createdPages = await prisma.accessPage.findMany();

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    console.log('üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...');
    
    for (const page of createdPages) {
      for (const role of createdRoles) {
        let canAccess = false;
        
        // –õ–æ–≥–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        switch (role.name) {
          case 'OWNER':
            canAccess = true; // –í–ª–∞–¥–µ–ª–µ—Ü –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É
            break;
          case 'PARTNER':
            canAccess = ['/admin', '/profile', '/pricing', '/dashboard', '/partner', '/health'].includes(page.path);
            break;
          case 'POINT':
            canAccess = ['/profile', '/pricing', '/dashboard', '/point', '/health'].includes(page.path);
            break;
          case 'EMPLOYEE':
            canAccess = ['/profile', '/dashboard', '/employee', '/health'].includes(page.path);
            break;
          case 'USER':
            canAccess = ['/profile', '/pricing', '/dashboard'].includes(page.path);
            break;
        }

        await prisma.accessRolePageAccess.upsert({
          where: {
            roleId_pageId: {
              roleId: role.id,
              pageId: page.id,
            },
          },
          update: { canAccess },
          create: {
            roleId: role.id,
            pageId: page.id,
            canAccess,
          },
        });
      }
    }

    console.log('üéâ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const roleCount = await prisma.accessRole.count();
    const pageCount = await prisma.accessPage.count();
    const accessCount = await prisma.accessRolePageAccess.count();
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –†–æ–ª–µ–π: ${roleCount}`);
    console.log(`   - –°—Ç—Ä–∞–Ω–∏—Ü: ${pageCount}`);
    console.log(`   - –ü—Ä–∞–≤–∏–ª –¥–æ—Å—Ç—É–ø–∞: ${accessCount}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

initRBAC().catch(console.error);
