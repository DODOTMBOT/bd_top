generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Partner {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("PartnerAccount", fields: [userId], references: [id], onDelete: Cascade)
  points    Point[]

  @@index([userId])
}

model Point {
  id        String   @id @default(cuid())
  name      String
  address   String?
  partnerId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("PointAccount", fields: [userId], references: [id], onDelete: Cascade)
  partner   Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  employees User[]   @relation("PointEmployees")

  @@index([partnerId])
  @@index([userId])
}

model User {
  id                 String   @id @default(cuid())
  email              String   @unique
  login              String?  @unique
  name               String?
  passwordHash       String
  role               Role
  mustChangePassword Boolean  @default(false)
  pointId            String?
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  partnerAccounts    Partner[] @relation("PartnerAccount")
  pointAccounts      Point[]   @relation("PointAccount")
  point              Point?   @relation("PointEmployees", fields: [pointId], references: [id], onDelete: SetNull)

  @@index([role])
  @@index([pointId])
}

model Page {
  id        String   @id @default(cuid())
  path      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RolePageAccess {
  roleKey String
  path    String
  allowed Boolean @default(false)

  @@id([roleKey, path])
  @@index([roleKey])
  @@index([path])
}

enum Role {
  OWNER
  PARTNER
  POINT
  USER
}
