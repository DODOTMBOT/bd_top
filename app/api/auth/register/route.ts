export const runtime = 'nodejs'

import { NextRequest, NextResponse } from 'next/server'
import { z } from 'zod'
import bcrypt from 'bcryptjs'
import { prisma } from '@/lib/prisma'
import { ensureSessionVersionColumn } from '@/lib/db/ensureSessionVersion'
import { sendTelegram } from '@/lib/telegram'

const registerSchema = z.object({
  email: z.string().email('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
  password: z.string().min(8, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤'),
  name: z.string().optional(),
  login: z.string().min(3, '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞').optional(),
})

export async function POST(request: NextRequest) {
  try {
    await ensureSessionVersionColumn();
    const body = await request.json()
    const validatedData = registerSchema.parse(body)
    
    const { email, password, name, login } = validatedData
    const normalizedEmail = email.trim().toLowerCase()
    const userLogin = login || normalizedEmail.split('@')[0] // –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ –ª–æ–≥–∏–Ω –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await prisma.user.findFirst({
      where: { 
        OR: [
          { email: normalizedEmail },
          { login: userLogin }
        ]
      }
    })

    if (existingUser) {
      return NextResponse.json(
        { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
        { status: 409 }
      )
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const passwordHash = await bcrypt.hash(password, 10)

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser = await prisma.user.create({
      data: {
        login: userLogin,
        email: normalizedEmail,
        passwordHash,
        name: name?.trim() || null,
        role: 'USER'
      },
      select: { id: true, login: true, email: true, name: true, role: true, createdAt: true }
    })

    console.log('User created:', { id: newUser.id, email: newUser.email })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    sendTelegram(
      [
        `<b>üü¢ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>`,
        `–ò–º—è: <b>${newUser.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>`,
        `–õ–æ–≥–∏–Ω: <code>${newUser.login}</code>`,
        `Email: <code>${newUser.email}</code>`,
        `–†–æ–ª—å: <b>${newUser.role}</b>`,
        `ID: <code>${newUser.id}</code>`,
        `–°–æ–∑–¥–∞–Ω: ${new Date(newUser.createdAt).toLocaleString('ru-RU')}`,
      ].join('\n')
    ).catch(console.error);

    return NextResponse.json(
      { ok: true },
      { status: 201 }
    )

  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', details: error.errors },
        { status: 400 }
      )
    }

    console.error('Registration error:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}
